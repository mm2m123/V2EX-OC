//
//  NetWorkRequest.m
//  MyBus
//
//  Created by yytmzys on 15/3/16.
//  Copyright (c) 2015Âπ¥ Beijing Fengyangtianshun Technology Co., Ltd. All rights reserved.
//

#import "NetWorkRequest.h"
#import <AFNetworking/AFNetworking.h>
#import "UIImage+Extension.h"
#import "AppDelegate.h"

static UIAlertController *alvc;

@implementation NetWorkRequest

/// 1.Ê£ÄÊµãÁΩëÁªúÁä∂ÊÄÅ
- (void)netWorkStatus {
    /**
     AFNetworkReachabilityStatusUnknown          = -1,  // Êú™Áü•
     AFNetworkReachabilityStatusNotReachable     = 0,   // Êó†ËøûÊé•
     AFNetworkReachabilityStatusReachableViaWWAN = 1,   // 3G Ëä±Èí±
     AFNetworkReachabilityStatusReachableViaWiFi = 2,   // WiFi
     */
    // Â¶ÇÊûúË¶ÅÊ£ÄÊµãÁΩëÁªúÁä∂ÊÄÅÁöÑÂèòÂåñ,ÂøÖÈ°ªÁî®Ê£ÄÊµãÁÆ°ÁêÜÂô®ÁöÑÂçï‰æãÁöÑstartMonitoring
    [[AFNetworkReachabilityManager sharedManager] startMonitoring];
    // Ê£ÄÊµãÁΩëÁªúËøûÊé•ÁöÑÂçï‰æã,ÁΩëÁªúÂèòÂåñÊó∂ÁöÑÂõûË∞ÉÊñπÊ≥ï
    [[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {}];
}

/// 2.JSONÊñπÂºèËé∑ÂèñÊï∞ÊçÆ
+ (void)JSONDataWithUrl:(NSString *)url success:(void (^)(id json))success fail:(void (^)(id error))fail netWorkStatus:(void(^)(NSInteger status))statusChange {
    // Â¶ÇÊûúË¶ÅÊ£ÄÊµãÁΩëÁªúÁä∂ÊÄÅÁöÑÂèòÂåñ,ÂøÖÈ°ªÁî®Ê£ÄÊµãÁÆ°ÁêÜÂô®ÁöÑÂçï‰æãÁöÑstartMonitoring
    [[AFNetworkReachabilityManager sharedManager] startMonitoring];
    // Ê£ÄÊµãÁΩëÁªúËøûÊé•ÁöÑÂçï‰æã,ÁΩëÁªúÂèòÂåñÊó∂ÁöÑÂõûË∞ÉÊñπÊ≥ï
    [[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
        if (statusChange) {
            statusChange(status);
        }
    }];
    // ÁΩëÁªúËÆøÈóÆÊòØÂºÇÊ≠•ÁöÑ,ÂõûË∞ÉÊòØ‰∏ªÁ∫øÁ®ãÁöÑ,Âõ†Ê≠§Á®ãÂ∫èÂëò‰∏çÁî®ÁÆ°Âú®‰∏ªÁ∫øÁ®ãÊõ¥Êñ∞UIÁöÑ‰∫ãÊÉÖ
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
    NSDictionary *dict = @{@"format": @"json"};
    [manager GET:url parameters:dict headers:nil progress:^(NSProgress * _Nonnull downloadProgress) {

    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        if (success) {
            success(responseObject);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"%@", error);
        if (fail) {
            fail(error);
        }
    }];
}

/// 3.xmlÊñπÂºèËé∑ÂèñÊï∞ÊçÆ
+ (void)XMLDataWithUrl:(NSString *)urlStr success:(void (^)(id xml))success fail:(void (^)(id error))fail {
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
    // ËøîÂõûÁöÑÊï∞ÊçÆÊ†ºÂºèÊòØXML
    manager.responseSerializer = [AFXMLParserResponseSerializer serializer];
    NSDictionary *dict = @{@"format": @"xml"};
    // ÁΩëÁªúËÆøÈóÆÊòØÂºÇÊ≠•ÁöÑ,ÂõûË∞ÉÊòØ‰∏ªÁ∫øÁ®ãÁöÑ,Âõ†Ê≠§Á®ãÂ∫èÂëò‰∏çÁî®ÁÆ°Âú®‰∏ªÁ∫øÁ®ãÊõ¥Êñ∞UIÁöÑ‰∫ãÊÉÖ
    [manager GET:urlStr parameters:dict headers:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        if (success) {
            success(responseObject);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"%@", error);
        if (fail) {
            fail(error);
        }
    }];
}

+ (void)getJSONWithUrl:(NSString *)urlStr parameters:(id)parameters success:(void (^)(id result))success fail:(void (^)(id error))fail {
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
    NSString *url = [NetWorkRequest getReady:manager And:parameters And:urlStr];
    [manager GET:url parameters:parameters headers:nil progress:^(NSProgress * _Nonnull downloadProgress) {

    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        if (success) {
            success([NetWorkRequest NetworkSuccessHandlyAndCallBack:task And:responseObject]);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (fail) {
            fail([NetWorkRequest NetworkFailureHandlyAndCallBack:task And:error And:urlStr]);
        }
    }];
}

+ (void)getJSONWithUrlNoBase:(NSString *)urlStr parameters:(id)parameters success:(void (^)(id result))success fail:(void (^)(id error))fail {
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
//    NSString *url = [NetWorkRequest getReady:manager And:parameters And:urlStr];
    // ËÆæÁΩÆËØ∑Ê±ÇÊ†ºÂºè
    manager.requestSerializer = [AFJSONRequestSerializer serializer];
    // ËÆæÁΩÆËøîÂõûÊ†ºÂºè
    manager.responseSerializer = [AFHTTPResponseSerializer serializer];
    // ËÆæÁΩÆË∂ÖÊó∂Êó∂Èó¥
    manager.requestSerializer.timeoutInterval = 30;
    [manager.requestSerializer setStringEncoding:NSUTF8StringEncoding];
    [manager.requestSerializer setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Contsetent-Type"];
    manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@"text/plain", @"text/html", @"application/json", nil];
    [manager GET:urlStr parameters:parameters headers:nil progress:^(NSProgress * _Nonnull downloadProgress) {

    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        if (success) {
            success([NetWorkRequest NetworkSuccessHandlyAndCallBack:task And:responseObject]);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (fail) {
            fail([NetWorkRequest NetworkFailureHandlyAndCallBack:task And:error And:urlStr]);
        }
    }];
}

/// 4.postÊèê‰∫§jsonÊï∞ÊçÆ
+ (void)postJSONWithUrl:(NSString *)urlStr parameters:(id)parameters success:(void (^)(id result))success fail:(void (^)(NSError *error))fail {
    [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:YES];
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
    // ËÆæÁΩÆËØ∑Ê±ÇÊ†ºÂºè
    manager.requestSerializer  = [AFHTTPRequestSerializer serializer];
    // ËÆæÁΩÆËøîÂõûÊ†ºÂºè
    manager.requestSerializer.timeoutInterval = 30;
    manager.responseSerializer = [AFHTTPResponseSerializer serializer];
    NSString *url = [NSString stringWithFormat:@"%@%@", HTTP_BaseURL, urlStr];
    if ([urlStr isEqualToString:@"https://itunes.apple.com/lookup?bundleId=com.CCPPH.DSHFinal.Tedren"]) {
        url = urlStr;
    }
    NSMutableString *para = [NSMutableString new];
    for (NSString *key in [parameters allKeys]) {
        NSString *value = parameters[key];
//        if ([NSString validateContainsEmoji:value]) {
//            SHOWERROR(@"‰∏çËÉΩÂê´ÊúâemojiÂ≠óÁ¨¶")
//            return;
//        }
        if (para.length == 0) {
            [para appendString:[NSString stringWithFormat:@"%@=%@",key,value]];
        }else
        [para appendString:[NSString stringWithFormat:@"&%@=%@",key,value]];
    }
    NSLog(@"üêªURLString == %@?%@", url, para);
    [manager POST:url parameters:parameters headers:nil progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        if (success) {
            success([NetWorkRequest NetworkSuccessHandlyAndCallBack:task And:responseObject]);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (fail) {
            fail([NetWorkRequest NetworkFailureHandlyAndCallBack:task And:error And:urlStr]);
        }
    }];
}

//put
+ (void)putJSONWithUrl:(NSString *)urlStr parameters:(id)parameters success:(void (^)(id result))success fail:(void (^)(id error))fail {
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
    // ËÆæÁΩÆËØ∑Ê±ÇÊ†ºÂºè
    manager.requestSerializer  = [AFHTTPRequestSerializer serializer];
    // ËÆæÁΩÆËøîÂõûÊ†ºÂºè
    manager.requestSerializer.timeoutInterval = 30;
    manager.responseSerializer = [AFHTTPResponseSerializer serializer];
    //    NSString *string = parameters[KAuthorization];
    //    if (string.length > 0) {
    //        [manager.requestSerializer setValue:string forHTTPHeaderField:KAuthorization];
    //        [parameters removeObjectForKey:KAuthorization];
    //    }
    NSString *url = [NSString stringWithFormat:@"%@%@", HTTP_BaseURL, urlStr];
    NSMutableString *para = [NSMutableString new];
    for (NSString *key in [parameters allKeys]) {
        NSString *value = parameters[key];
        if (para.length == 0) {
            [para appendString:[NSString stringWithFormat:@"%@=%@",key,value]];
        }else
            [para appendString:[NSString stringWithFormat:@"&%@=%@",key,value]];
    }
    NSLog(@"üêªURLString == %@?%@", url, para);
    
    [manager PUT:url parameters:parameters headers:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        if (success) {
            success([NetWorkRequest NetworkSuccessHandlyAndCallBack:task And:responseObject]);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (fail) {
            fail([NetWorkRequest NetworkFailureHandlyAndCallBack:task And:error And:urlStr]);
        }
    }];
}

//delete
+ (void)deleteJSONWithUrl:(NSString *)urlStr parameters:(id)parameters success:(void (^)(id result))success fail:(void (^)(id error))fail {
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
    NSString *url = [NetWorkRequest getReady:manager And:parameters And:urlStr];
    [manager DELETE:url parameters:parameters headers:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        if (success) {
            success([NetWorkRequest NetworkSuccessHandlyAndCallBack:task And:responseObject]);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        fail([NetWorkRequest NetworkFailureHandlyAndCallBack:task And:error And:urlStr]);
    }];
}

/// 5.‰∏ãËΩΩÊñá‰ª∂
+ (void)sessionDownloadWithUrl:(NSString *)urlStr success:(void (^)(NSString *fileURL))success fail:(void (^)(id error))fail {
    NSURLSessionConfiguration *config = [NSURLSessionConfiguration defaultSessionConfiguration];
    AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:config];
    NSString *urlString = [urlStr stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    NSURL *url = [NSURL URLWithString:urlString];
    NSURLRequest *request = [NSURLRequest requestWithURL:url];
    
    NSURLSessionDownloadTask *task = [manager downloadTaskWithRequest:request progress:nil destination:^NSURL *(NSURL *targetPath, NSURLResponse *response) {
        // ÊåáÂÆö‰∏ãËΩΩÊñá‰ª∂‰øùÂ≠òÁöÑË∑ØÂæÑ
        //        NSLog(@"%@ %@", targetPath, response.suggestedFilename);
        // Â∞Ü‰∏ãËΩΩÊñá‰ª∂‰øùÂ≠òÂú®ÁºìÂ≠òË∑ØÂæÑ‰∏≠
        NSString *cacheDir = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES)[0];
        NSString *path = [cacheDir stringByAppendingPathComponent:response.suggestedFilename];
        
        // URLWithStringËøîÂõûÁöÑÊòØÁΩëÁªúÁöÑURL,Â¶ÇÊûú‰ΩøÁî®Êú¨Âú∞URL,ÈúÄË¶ÅÊ≥®ÊÑè
        //        NSURL *fileURL1 = [NSURL URLWithString:path];
        NSURL *fileURL = [NSURL fileURLWithPath:path];
        [NetWorkRequest getdd:[NSString stringWithFormat:@"%@", fileURL]];
        //        NSLog(@"== %@ |||| %@", fileURL1, fileURL);
        if (success) {
            success(path);
        }
        
        return fileURL;
    } completionHandler:^(NSURLResponse *response, NSURL *filePath, NSError *error) {
//        NSLog(@"‰∏ãËΩΩÂ§±Ë¥• %@ %@", filePath, error);
        [NetWorkRequest getdd:[NSString stringWithFormat:@"%@", filePath]];
        if (fail) {
            fail(error);
        }
    }];
    
    [task resume];
}

+ (void)getdd:(NSString *)filePath {
    NSFileManager* manager = [NSFileManager defaultManager];
    NSLog(@"Â§ßÂ∞è = %llu", [[manager attributesOfItemAtPath:filePath error:nil] fileSize] / 1024);
    if ([manager fileExistsAtPath:filePath]){
        
    }
}

/**
 * ‰∏ãËΩΩÊñá‰ª∂
 */ //
+ (void)downloadFileURL:(NSString *)aUrl success:(void (^)(id responseObject))success fail:(void (^)(id error))fail {
    NSString *urlString = [aUrl stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
    //‰∏ãËΩΩÈôÑ‰ª∂
    NSURL *url = [[NSURL alloc] initWithString:urlString];
    NSURLRequest *request = [NSURLRequest requestWithURL:url];

    [[AFHTTPSessionManager manager] downloadTaskWithRequest:request progress:^(NSProgress * _Nonnull downloadProgress) {
      
    } destination:^NSURL *(NSURL * _Nonnull targetPath, NSURLResponse * _Nonnull response) {
        
        NSString *s = response.suggestedFilename;
        NSString *cacheDir = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES)[0];
        NSString *path = [cacheDir stringByAppendingPathComponent:response.suggestedFilename];
        NSLog(@"‰∏ãËΩΩÊàêÂäü ==%@", s);
        [NetWorkRequest getdd:path];
        if (success) {
            success(path);
        }
        
        return [NSURL fileURLWithPath:path];
        
    }completionHandler:^(NSURLResponse * _Nonnull response, NSURL * _Nullable filePath, NSError * _Nullable error) {
        NSLog(@"‰∏ãËΩΩÈîôËØØ == %@", error);
        if (fail) {
            fail(error);
        }
    }];
    

}

+ (void)PostImages:(NSString *)urlStr post:(NSMutableDictionary *)dic dicImages:(NSMutableArray *) imageArray amrFilePath:(NSString *)amrFilePath  name:(NSString *)name success:(void (^)(id result))success fail:(void (^)(id error))fail {
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
    manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@"application/json", @"text/html", @"text/json", @"text/javascript", nil];
    manager.responseSerializer = [AFHTTPResponseSerializer serializer];
//    NSString *string = dic[KAuthorization];
//    if (string.length > 0) {
//        [manager.requestSerializer setValue:GETAuthorization forHTTPHeaderField:KAuthorization];
//        [dic removeObjectForKey:KAuthorization];
//    }
    NSString *url = [NSString stringWithFormat:@"%@%@", HTTP_BaseURL, urlStr];
    NSMutableString *para = [NSMutableString new];
    for (NSString *key in [dic allKeys]) {
        NSString *value = dic[key];
        if (para.length == 0) {
            [para appendString:[NSString stringWithFormat:@"%@=%@",key,value]];
        }else
            [para appendString:[NSString stringWithFormat:@"&%@=%@",key,value]];
    }
    NSLog(@"post url == %@?%@", url, para);
    
    [manager POST:url parameters:dic headers:nil constructingBodyWithBlock:^(id<AFMultipartFormData>  _Nonnull formData) {
        for (int i = 0; i < imageArray.count; i++) {
            UIImage *image = [imageArray objectAtIndex:i];
            //Èò≤Ê≠¢ÂõæÁâáÊóãËΩ¨
            image = [image fixOrientation];
            //ÂéãÁº©ÂõæÁâá
            NSData *data;
            if (image.size.height >=1024 || image.size.width >= 1024) {
                CGFloat bili = image.size.height/image.size.width;
                int a = 1024*bili;
                int b = 1024/bili;
                if (bili > 1) {
                    data =[NetWorkRequest imageWithImage:[imageArray objectAtIndex:i] scaledToSize:CGSizeMake(b,1024) ];
                }else{
                    data =[NetWorkRequest imageWithImage:[imageArray objectAtIndex:i] scaledToSize:CGSizeMake(1024,a)];
                }
            }else{
                data = UIImageJPEGRepresentation(image, 1.0);
            }
            [formData appendPartWithFileData:data name:name fileName:[NSString stringWithFormat:@"image%@.jpg", [[NSUUID UUID] UUIDString]] mimeType:@"image/jpeg"];
        }
    } progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSLog(@"%@",responseObject);
        NSDictionary *result = [NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        success((result));
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (fail) {
            fail(error);
        }
        NSLog(@"Âèëpic == %@", error);
    }];
}

/// 6.Êñá‰ª∂‰∏ä‰º†ÔºçËá™ÂÆö‰πâ‰∏ä‰º†Êñá‰ª∂Âêç
+ (void)postUploadWithUrl:(NSString *)urlStr fileUrl:(NSURL *)fileURL fileName:(NSString *)fileName fileType:(NSString *)fileTye success:(void (^)(id responseObject))success fail:(void (^)(id error))fail {
    // Êú¨Âú∞‰∏ä‰º†ÁªôÊúçÂä°Âô®Êó∂,Ê≤°ÊúâÁ°ÆÂÆöÁöÑURL,‰∏çÂ•ΩÁî®MD5ÁöÑÊñπÂºèÂ§ÑÁêÜ
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
    manager.responseSerializer = [AFHTTPResponseSerializer serializer];
    //@"http://localhost/demo/upload.php"
    [manager POST:urlStr parameters:nil headers:nil constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {
        
        //        NSURL *fileURL = [[NSBundle mainBundle] URLForResource:@"Â§¥ÂÉè1.png" withExtension:nil];
        
        // Ë¶Å‰∏ä‰º†‰øùÂ≠òÂú®ÊúçÂä°Âô®‰∏≠ÁöÑÂêçÁß∞
        // ‰ΩøÁî®Êó∂Èó¥Êù•‰Ωú‰∏∫Êñá‰ª∂Âêç 2014-04-30 14:20:57.png
        // ËÆ©‰∏çÂêåÁöÑÁî®Êà∑‰ø°ÊÅØ,‰øùÂ≠òÂú®‰∏çÂêåÁõÆÂΩï‰∏≠
        //        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
        //        // ËÆæÁΩÆÊó•ÊúüÊ†ºÂºè
        //        formatter.dateFormat = @"yyyy-MM-dd HH:mm:ss";
        //        NSString *fileName = [formatter stringFromDate:[NSDate date]];
        
        //@"image/png"
        [formData appendPartWithFileURL:fileURL name:@"uploadFile" fileName:fileName mimeType:fileTye error:NULL];
    }  progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *result = [NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        success((result));
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (fail) {
            fail(error);
        }
        
        NSLog(@"Âèëpic == %@", error);
    }];
}

/// 7.Êñá‰ª∂‰∏ä‰º†ÔºçÈöèÊú∫ÁîüÊàêÊñá‰ª∂Âêç
+ (void)postUploadWithUrl:(NSString *)urlStr fileUrl:(NSURL *)fileURL success:(void (^)(id responseObject))success fail:(void (^)(id error))fail {
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
    // AFHTTPResponseSerializerÂ∞±ÊòØÊ≠£Â∏∏ÁöÑHTTPËØ∑Ê±ÇÂìçÂ∫îÁªìÊûú:NSData
    // ÂΩìËØ∑Ê±ÇÁöÑËøîÂõûÊï∞ÊçÆ‰∏çÊòØJSON,XML,PList,UIImage‰πãÂ§ñ,‰ΩøÁî®AFHTTPResponseSerializer
    // ‰æãÂ¶ÇËøîÂõû‰∏Ä‰∏™html,text...
    //
    // ÂÆûÈôÖ‰∏äÂ∞±ÊòØAFNÊ≤°ÊúâÂØπÂìçÂ∫îÊï∞ÊçÆÂÅö‰ªª‰ΩïÂ§ÑÁêÜÁöÑÊÉÖÂÜµ
    manager.responseSerializer = [AFHTTPResponseSerializer serializer];
    
    // formDataÊòØÈÅµÂÆà‰∫ÜAFMultipartFormDataÁöÑÂØπË±°
    
    [manager POST:urlStr parameters:nil headers:nil constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {
        
        // Â∞ÜÊú¨Âú∞ÁöÑÊñá‰ª∂‰∏ä‰º†Ëá≥ÊúçÂä°Âô®
        //        NSURL *fileURL = [[NSBundle mainBundle] URLForResource:@"Â§¥ÂÉè1.png" withExtension:nil];
        
        [formData appendPartWithFileURL:fileURL name:@"uploadFile" error:NULL];
    } progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *result = [NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        success((result));
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        if (fail) {
            fail(error);
        }
        
        NSLog(@"Âèëpic == %@", error);
    }];
    
}

//ÂõæÁâá‰∏ä‰º†
+ (void)PostImagesToServer:(NSString *) strUrl post:(NSString *)postStr andPicFile:(NSString *)file dicImages:(NSMutableDictionary *) dicImages success:(void (^)(id result))success fail:(void (^)(id error))fail {
    
    NSMutableDictionary * params=[self getPostDictWithPostStr:postStr];
    //ÂàÜÁïåÁ∫øÁöÑÊ†áËØÜÁ¨¶
    NSString *TWITTERFON_FORM_BOUNDARY = @"AaB03x";
    //Ê†πÊçÆurlÂàùÂßãÂåñrequest
    //NSMutableURLRequest* request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:strUrl] cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:10];
    
    NSURL *url = [NSURL URLWithString:strUrl];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    //ÂàÜÁïåÁ∫ø --AaB03x
    NSString *MPboundary=[[NSString alloc]initWithFormat:@"--%@",TWITTERFON_FORM_BOUNDARY];
    //ÁªìÊùüÁ¨¶ AaB03x--
    NSString *endMPboundary=[[NSString alloc]initWithFormat:@"%@--",MPboundary];
    //Ë¶Å‰∏ä‰º†ÁöÑÂõæÁâá
    UIImage *image;//=[params objectForKey:@"pic"];
    //ÂæóÂà∞ÂõæÁâáÁöÑdata
    //NSData* data = UIImagePNGRepresentation(image);
    //http bodyÁöÑÂ≠óÁ¨¶‰∏≤
    NSMutableString *body=[[NSMutableString alloc]init];
    //ÂèÇÊï∞ÁöÑÈõÜÂêàÁöÑÊâÄÊúâkeyÁöÑÈõÜÂêà
    NSArray *keys= [params allKeys];
    
    //ÈÅçÂéÜkeys
    for(int i=0;i<[keys count];i++) {
        //ÂæóÂà∞ÂΩìÂâçkey
        NSString *key=[keys objectAtIndex:i];
        //Â¶ÇÊûúkey‰∏çÊòØpicÔºåËØ¥ÊòévalueÊòØÂ≠óÁ¨¶Á±ªÂûãÔºåÊØîÂ¶ÇnameÔºöBoris
        //if(![key isEqualToString:@"pic"]) {
        //Ê∑ªÂä†ÂàÜÁïåÁ∫øÔºåÊç¢Ë°å
        [body appendFormat:@"%@\r\n",MPboundary];
        //Ê∑ªÂä†Â≠óÊÆµÂêçÁß∞ÔºåÊç¢2Ë°å
        [body appendFormat:@"Content-Disposition: form-data; name=\"%@\"\r\n\r\n",key];
        //[body appendString:@"Content-Transfer-Encoding: 8bit"];
        //Ê∑ªÂä†Â≠óÊÆµÁöÑÂÄº
        [body appendFormat:@"%@\r\n",[params objectForKey:key]];
        //}
    }
    ////Ê∑ªÂä†ÂàÜÁïåÁ∫øÔºåÊç¢Ë°å
    //[body appendFormat:@"%@\r\n",MPboundary];
    
    //Â£∞ÊòémyRequestDataÔºåÁî®Êù•ÊîæÂÖ•http body
    NSMutableData *myRequestData=[NSMutableData data];
    //Â∞ÜbodyÂ≠óÁ¨¶‰∏≤ËΩ¨Âåñ‰∏∫UTF8Ê†ºÂºèÁöÑ‰∫åËøõÂà∂
    [myRequestData appendData:[body dataUsingEncoding:NSUTF8StringEncoding]];
    
    //Âæ™ÁéØÂä†ÂÖ•‰∏ä‰º†ÂõæÁâá
    keys = [dicImages allKeys];
    for(int i = 0; i< [keys count] ; i++){
        //Ë¶Å‰∏ä‰º†ÁöÑÂõæÁâá
        image = [dicImages objectForKey:[keys objectAtIndex:i ]];
        //ÂæóÂà∞ÂõæÁâáÁöÑdata
        NSData* data =  UIImageJPEGRepresentation(image, 0.0);
        NSMutableString *imgbody = [[NSMutableString alloc] init];
        //Ê≠§Â§ÑÂæ™ÁéØÊ∑ªÂä†ÂõæÁâáÊñá‰ª∂
        //Ê∑ªÂä†ÂõæÁâá‰ø°ÊÅØÂ≠óÊÆµ
        //Â£∞ÊòépicÂ≠óÊÆµÔºåÊñá‰ª∂Âêç‰∏∫boris.png
        //[body appendFormat:[NSString stringWithFormat: @"Content-Disposition: form-data; name=\"File\"; filename=\"%@\"\r\n", [keys objectAtIndex:i]]];
        
        ////Ê∑ªÂä†ÂàÜÁïåÁ∫øÔºåÊç¢Ë°å
        [imgbody appendFormat:@"%@\r\n",MPboundary];
        //        [imgbody appendFormat:@"Content-Disposition: form-data; name=\"File%d\"; filename=\"%@.jpg\"\r\n", i, [keys objectAtIndex:i]];
        [imgbody appendFormat:@"Content-Disposition: form-data; name=\"%@\"; filename=\"%@.jpg\"\r\n", file,[keys objectAtIndex:i]];
        //Â£∞Êòé‰∏ä‰º†Êñá‰ª∂ÁöÑÊ†ºÂºè
        [imgbody appendFormat:@"Content-Type: application/octet-stream; charset=utf-8\r\n\r\n"];
        
        NSLog(@"‰∏ä‰º†ÁöÑÂõæÁâáÔºö%d  %@", i, [keys objectAtIndex:i]);
        
        //Â∞ÜbodyÂ≠óÁ¨¶‰∏≤ËΩ¨Âåñ‰∏∫UTF8Ê†ºÂºèÁöÑ‰∫åËøõÂà∂
        //[myRequestData appendData:[body dataUsingEncoding:NSUTF8StringEncoding]];
        [myRequestData appendData:[imgbody dataUsingEncoding:NSUTF8StringEncoding]];
        //Â∞ÜimageÁöÑdataÂä†ÂÖ•
        [myRequestData appendData:data];
        [myRequestData appendData:[ @"\r\n" dataUsingEncoding:NSUTF8StringEncoding]];
    }
    //Â£∞ÊòéÁªìÊùüÁ¨¶Ôºö--AaB03x--
    NSString *end=[[NSString alloc]initWithFormat:@"%@\r\n",endMPboundary];
    //Âä†ÂÖ•ÁªìÊùüÁ¨¶--AaB03x--
    [myRequestData appendData:[end dataUsingEncoding:NSUTF8StringEncoding]];
    
    //ËÆæÁΩÆHTTPHeader‰∏≠Content-TypeÁöÑÂÄº
    NSString *content=[[NSString alloc]initWithFormat:@"multipart/form-data; boundary=%@",TWITTERFON_FORM_BOUNDARY];
    //ËÆæÁΩÆHTTPHeader
    [request setValue:content forHTTPHeaderField:@"Content-Type"];
    //[request setValue:@"keep-alive" forHTTPHeaderField:@"connection"];
    //[request setValue:@"UTF-8" forHTTPHeaderField:@"Charsert"];
    //ËÆæÁΩÆContent-Length
    [request setValue:[NSString stringWithFormat:@"%lu", (unsigned long)[myRequestData length]] forHTTPHeaderField:@"Content-Length"];
    //ËÆæÁΩÆhttp body
    [request setHTTPBody:myRequestData];
    //http method
    [request setHTTPMethod:@"POST"];
    
    //Âª∫Á´ãËøûÊé•ÔºåËÆæÁΩÆ‰ª£ÁêÜ
    //NSURLConnection *conn = [[NSURLConnection alloc] initWithRequest:request delegate:self];
    
    //ËÆæÁΩÆÊé•ÂèóresponseÁöÑdata
    NSOperationQueue *queue = [[NSOperationQueue alloc] init];
    [queue setMaxConcurrentOperationCount:4];
    
    [NSURLConnection sendAsynchronousRequest:request queue:queue completionHandler:^(NSURLResponse *response, NSData *data, NSError *connectionError) {
        //NSString *requestStr=[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
        if (!connectionError) {
            NSDictionary *dict=[NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableContainers error:&connectionError];
            NSLog(@"%@",dict);
            success(dict);
        }else{
            fail(connectionError);
        }
    }];
}

/// ÈÄÇÁî®‰∫éÂ§öÂõæÁâáÂ§öË∑ØÂæÑ‰∏ä‰º†
+ (void)upImaWithUrl:(NSString *)urlStr andPost:(NSDictionary *)dic pngArray:(NSArray *)pngArray jpgArray:(NSArray *)jpgArray success:(void (^)(id result))success fail:(void (^)(id error))fail {
    
    [[AFHTTPSessionManager manager] POST:urlStr parameters:dic headers:nil constructingBodyWithBlock:^(id<AFMultipartFormData>  _Nonnull formData) {
        for (int i =  0; i < pngArray.count; i++) {
            NSData *data =  UIImageJPEGRepresentation([pngArray objectAtIndex:i], 0.5);
            [formData appendPartWithFileData:data name:@"filela" fileName:[NSString stringWithFormat:@"filepng%d.png", i] mimeType:@"image/png"];
        }
        for (int i =  0; i < jpgArray.count; i++) {
            NSData *data2 =  UIImageJPEGRepresentation([jpgArray objectAtIndex:i], 0.5);
            [formData appendPartWithFileData:data2 name:@"file" fileName:[NSString stringWithFormat:@"filejpg%d.jpg", i] mimeType:@"image/jpeg"];
        }
    } progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *result = [NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
        success((result));
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
          fail((error));
    }];
}

+ (NSMutableDictionary *) getPostDictWithPostStr:(NSString *)postStr {
    NSArray *array=[postStr componentsSeparatedByString:@"&"];
    NSMutableDictionary *dict=[[NSMutableDictionary alloc] init];
    for (NSString *subStr in array) {
        NSArray *subArray=[subStr componentsSeparatedByString:@"="];
        [dict setObject:[subArray lastObject] forKey:[subArray firstObject]];
    }
    return dict;
}

//ÂéãÁº©ÂõæÁâá
+ (NSData *)imageWithImage:(UIImage*)image scaledToSize:(CGSize)newSize {
    UIGraphicsBeginImageContext(newSize);
    [image drawInRect:CGRectMake(0,0,newSize.width,newSize.height)];
    UIImage* newImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return UIImageJPEGRepresentation(newImage, 0.8);
}

+ (NSString *)getReady:(AFHTTPSessionManager *)manager And:(NSMutableDictionary *)parameters And:(NSString *)urlStr {
    // ËÆæÁΩÆËØ∑Ê±ÇÊ†ºÂºè
    manager.requestSerializer = [AFJSONRequestSerializer serializer];
    // ËÆæÁΩÆËøîÂõûÊ†ºÂºè
    manager.responseSerializer = [AFHTTPResponseSerializer serializer];
    // ËÆæÁΩÆË∂ÖÊó∂Êó∂Èó¥
    manager.requestSerializer.timeoutInterval = 30;

    [manager.requestSerializer setStringEncoding:NSUTF8StringEncoding];
    [manager.requestSerializer setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Contsetent-Type"];
    manager.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@"text/plain", @"text/html", @"application/json", nil];

    NSString *url = [NSString stringWithFormat:@"%@%@", HTTP_BaseURL, urlStr];
    NSMutableString *para = [NSMutableString new];
    for (NSString *key in [parameters allKeys]) {
        NSString *value = parameters[key];
        if (para.length == 0) {
            [para appendString:[NSString stringWithFormat:@"%@=%@",key,value]];
        }else
            [para appendString:[NSString stringWithFormat:@"&%@=%@",key,value]];
    }
    NSLog(@"üêªURLString == %@?%@", url, para);
    return url;
}

+ (NSDictionary *)NetworkSuccessHandlyAndCallBack:(NSURLSessionDataTask * _Nonnull)task And:( id  _Nullable)responseObject {
    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) task.response;
    NSLog(@"üôÑüôÑüôÑresponse status code: %ld", (long)[httpResponse statusCode]);
    NSMutableDictionary *result = [NSJSONSerialization JSONObjectWithData:responseObject options:NSJSONReadingMutableContainers error:nil];
    if ([[result class] isKindOfClass:[NSMutableDictionary class]]) {
        result[@"statusCode"] = [NSString stringWithFormat:@"%ld",(long)[httpResponse statusCode]];
    }
    [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:NO];
//    NSInteger code = [result[@"code"] integerValue];
    return result;
}

+ (NSDictionary *)NetworkFailureHandlyAndCallBack:(NSURLSessionDataTask * _Nonnull)task And:(NSError * _Nonnull)error And:(NSString *)urlStr {//NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject
    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) task.response;
    NSLog(@"üôÑüôÑüôÑresponse status code: %ld", (long)[httpResponse statusCode]);
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    NSData *errorData = error.userInfo[AFNetworkingOperationFailingURLResponseDataErrorKey];
    NSString *string = [[NSString alloc] initWithData:errorData encoding:NSUTF8StringEncoding];
//    dic[@"statusCode"] = [NSString stringWithFormat:@"%ld",(long)[httpResponse statusCode]];
//    dic[@"errorMessage"] = string;
    NSDictionary *d = [self dictionaryWithJsonString:string];
//    NSInteger code = (long)[httpResponse statusCode];
    return dic;
}

+ (UIViewController *)getCurrentVC {
    UIViewController *rootViewController = [self getViewControllerWindow].rootViewController;
    UIViewController *currentVC = [self getCurrentVCFrom:rootViewController];
    return currentVC;
}

//Ëé∑ÂèñRootViewControllerÊâÄÂú®ÁöÑwindow
+ (UIWindow*)getViewControllerWindow {
    UIWindow *window = [UIApplication sharedApplication].delegate.window;
    if (window.windowLevel != UIWindowLevelNormal) {
        NSArray *windows = [UIApplication sharedApplication].windows;
        for (UIWindow *target in windows) {
            if (target.windowLevel == UIWindowLevelNormal) {
                window = target;
                break;
            }
        }
    }
    return window;
}

+ (UIViewController *)getCurrentVCFrom:(UIViewController *)rootVC {
    UIViewController *currentVC;
    if ([rootVC presentedViewController]) {
        // ËßÜÂõæÊòØË¢´presentedÂá∫Êù•ÁöÑ
        while ([rootVC presentedViewController]) {
            rootVC = [rootVC presentedViewController];
        }
    }
    if ([rootVC isKindOfClass:[UITabBarController class]]) {
        // Ê†πËßÜÂõæ‰∏∫UITabBarController
        currentVC = [self getCurrentVCFrom:[(UITabBarController *)rootVC selectedViewController]];
    } else if ([rootVC isKindOfClass:[UINavigationController class]]){
        // Ê†πËßÜÂõæ‰∏∫UINavigationController
        currentVC = [self getCurrentVCFrom:[(UINavigationController *)rootVC visibleViewController]];
    } else {
        // Ê†πËßÜÂõæ‰∏∫ÈùûÂØºËà™Á±ª
        currentVC = rootVC;
    }
    return currentVC;
}

+ (NSDictionary *)dictionaryWithJsonString:(NSString *)jsonString {
    if (jsonString == nil) {
        return nil;
    }
    NSData *jsonData = [jsonString dataUsingEncoding:NSUTF8StringEncoding];
    NSError *err;
    NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:jsonData
                                                        options:NSJSONReadingMutableContainers
                                                          error:&err];
    if(err) {
        NSLog(@"jsonËß£ÊûêÂ§±Ë¥•Ôºö%@",err);
        return nil;
    }
    return dic;
}

@end
